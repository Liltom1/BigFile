(function(e,r){typeof exports=="object"&&typeof module<"u"?module.exports=r(require("vue")):typeof define=="function"&&define.amd?define(["vue"],r):(e=typeof globalThis<"u"?globalThis:e||self,e.bigFileUpload=r(e.Vue))})(this,function(e){"use strict";const m=[Object.assign({name:"BigFileUpload"},{__name:"index",props:{options:{type:Object,default:()=>({checkFileUrl:"",uploadFileUrl:"",mergeFileUrl:"",chunkSize:5242880})}},setup(d){const i=new Worker("../worker.js"),p=[],n=d;console.log(n.options);const k=l=>{const t=l.target.files[0],f=Math.ceil(t.size/n.options.chunkSize);console.log(f,"total"),p.push(...Array.from({length:f},(h,u)=>t.slice(u*n.options.chunkSize,(u+1)*n.options.chunkSize))),console.log(p,"chunks"),i.postMessage({chunks:p,filename:t.name}),console.log(i,"worker")};return i.onmessage=async function(l){console.log(l,"e");const{filename:o,hash:t}=l.data,f=await fetch(`${n.options.checkFileUrl}?hash=${t}`),{files:h}=await f.json(),u=new Set(h),g=p.map((s,a)=>({chunk:s,index:a})).filter(({index:s})=>!u.has(`${o}-${s}`)),w=s=>new Promise(a=>setTimeout(a,s));for(const{chunk:s,index:a}of g){const c=new FormData;c.append("filename",o),c.append("hash",t),c.append("index",a),c.append("file",s),await fetch(n.options.uploadFileUrl,{method:"POST",body:c}),await w(2e3)}await fetch(`${n.options.mergeFileUrl}?hash=${t}&filename=${o}`)},(l,o)=>(e.openBlock(),e.createElementBlock("div",null,[e.createElementVNode("input",{type:"file",id:"file",multiple:!0,onChange:k,onClick:o[0]||(o[0]=e.withModifiers(()=>{},["stop"]))},null,32)]))}})];return{install:function(d){m.forEach(i=>{d.component(i.name,i)})}}});
